<html>
<head><title>Jtrans Editor</title>

<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
<script src="convert.js"></script>
<link rel="stylesheet" type="text/css" href="font.css">
<script>
// Copyright 1996 Sandeep Sibal
///////////////////////////// Typeface/Font Stuff ////////////////////
// Notes:
// o and au can be removed (they can be generated).
// we can also save on anusvara (.n) + .r (2)
// and maybe .h_D and ra_D 
// and maaaybe period (.)
// thats 6 (maybe 7) in all
// .. we can create complete-I mathras if we use up one.
// and use the reamining 5 (maybe 6) to create shifted versions of low_vowels
// perhaps jra can be constructed? also sra and pra

// Activate faces

////////////////////////////////////////////////////////////////////////
// The constructor for Face
function Face () {
  var argv = Face.arguments;
  var argc = argv.length;
  this.list = new Object(); // index->name (allows scanning of all f)
  this.face = new Object(); // name->face (to make access quick for Trans)
  this.cons = new Object(); // name->cons (metric constraints on a dependent)
  for (var i = 0; i < argc; i++) {
    var j=i+32; // we assume ISO compliance.. (j is the character position)
    if (j>126) {j+=34;}
    // Extract Constraints
    var g = argv[i]; var len=g.length;
    if (g.charAt(len-3)==":"){
        var constraint=g.substring(len-2,len);
        g=g.substring(0,len-3); // g modified!
        if((g.charAt(0)=='*')&&(g!='*a')) {continue;} // * implies its not valid
        this.cons[g]=constraint;
    }
    this.list[j]=g;
    this.face[g]='&#'+j+';';
  }
  this.count = argc;
  this.maxindex=255; // beyond this are the composites
  this.add=AddFace; // which is a composite of 2 faces
  return this;
}

function AddFace(g,g1,g2) {
  if (!this.face[g1]) {return -1;} // no such Glyph
  if (!this.face[g2]) {return -1;} // no such Glyph
  this.maxindex++; this.list[this.maxindex]=g;
  this.face[g]=this.face[g1]+this.face[g2]; // faces add up
  if(this.cons[g1]) {this.cons[g]=this.cons[g1];} // kludgy..
  else {this.cons[g]=this.cons[g2];}
  this.count++;
  return 1;
}

{// I wrote this as a function, but since I want to call it only once...
  var f = new Face(
  // This is a list of typeface to phoneme matches.
  // They are the elemental typefaces

  // Begin low from 32 to 126 (95 chars)
" ","+aum","r_mar","kra:mm","jra:rr","zra:rr","*period","phra:mm","fra:mm","pra:rm","tr-","sra:rm","ru:rr","rU:mm","\.","\.\.","0","1","2","3","4","5","6","7","8","9","*a:rr","L^i:rm","*-o","L^I:rm","*-au","R^i:mm","R^I:md","+a:rr","bh-","chha:rm","dh-","+i:rd","f-","gh-","H","+I","jh-","kh-","La:rm","L-","N-","+e:rd","pha:mm","K-","Da:rm","sh-","th-","+U:mx","k-","JN-","Ta:rm","Tha:rm","Dha:rm","ph-","shh-","q-","G-",".Da:rd",".Dha:rd","-a:rr","b-","ch-","da:rm","-i","fa:mm","g-","ha:rd","-I","j-","ka:mm","l-","m-","n-","+I.n","p-","qa:mm","ra:rr","s-","t-","+u:rx","v-","GYa:rr","ksh-","y-","z-","N^a:mm",".a","&","#",
  // Begin high from 161 to 255 (95 chars)
"-i_wide","N^ka:rd","N^kha:rD","N^ga:mD","N^gha:mD","N^N^a:rD","N^na:rD","N^ma:rD","N^ya:rD","chhya:rd","Tka:rD","TTa:rD","TTha:rD","Tya:rr","Thya:rd","Dga:rD","Dgha:rD","DDa:rD","Dma:rD","Dya:rr","Dhya:rd","tt-","dga:rd","dda:rd","ddha:rd","dba:rd","dbha:rd","dma:rr","dya:rr","dva:rd","dhn-","nna:rr","shch-","shr-","shv-","shhTa:rm","shhTha:rm","hR^i:rD","hNa:md","hna:rd","hma:rd","hya:rd","hra:rd","hla:rd","hva:rd","-.h_r","-.h_m","-.h_d","-.h_D","-ra_dnd","-ra_ford","-ra_r","-ra_m","-ra_d","-ra_D","-u_r","-u_m","-u_d","-u_D","-U_r","-U_m","-U_d","-U_D","-R^i_r","-R^i_m","-R^i_d","R^i_D","-R^I_r","-R^I_m","-R^I_d","-R^I_D","-L^i_r","-L^i_m","-L^i_d","-L^i_D","-L^I_r","-L^I_m","-L^I_d","-L^I_D","-e~r","-e~m","-ai~r","-ai~m","-.c~r","-.c~m","-.n~r","-.n~m","-.n~rs","-.n~ms","-.N~r","-.N~m","-.r~r","-.r~m","-.r.n~r","-.r.n~m");

// make implicit chars 
  var aimpl="*a"; // the implicit danda..
  for (var ix=0; ix<255; ix++) {
    g = f.list[ix];
    if (!g) continue;
    if (g.charAt(g.length-1)!="-") continue; // ped type
    gg=g.substring(0,g.length-1);
    gimpl=gg+'a';
    if(f.face[gimpl]) continue; // implicit already exists
    f.add(gimpl,g,aimpl);
  }
  var maxindexafterimplicit=f.maxindex;

  // and then some
  f.add('-o','-a','-e~r');
  f.add('-au','-a','-ai~r');
  
  f.add('+aa','+a','-a');
  f.add('+o','+a','-o');
  f.add('+au','+a','-au');
  f.add('+ai','+e','-e~r');
  var maxindexbasic=f.maxindex;

  // ra_
  f.add('dra','da','-ra_ford'); //da
  // cant I extract them from the consonant's face.cons ?
  f.add('ghra','gha','-ra_dnd');
  f.add('chra','cha','-ra_dnd');
  f.add('Nra','Na','-ra_dnd');
  f.add('thra','tha','-ra_dnd');
  f.add('nra','na','-ra_dnd');
    f.add('nnra','nna','-ra_dnd');
  f.add('bra','ba','-ra_dnd');
  f.add('mra','ma','-ra_dnd');
  f.add('lra','la','-ra_dnd');
  f.add('vra','va','-ra_dnd');
  f.add('shhra','shha','-ra_dnd');
  f.add('gra','ga','-ra_dnd');
  f.add('dhra','dha','-ra_dnd'); // and now to the wedgie..
  f.add('khra','kha','-ra_'+(f.cons['kha']).charAt(1));
  f.add('N^ra','N^a','-ra_'+(f.cons['N^a']).charAt(1));
  f.add('chhra','chha','-ra_'+(f.cons['chha']).charAt(1));
  f.add('jhra','jha','-ra_'+(f.cons['jha']).charAt(1));
  f.add('JNra','JNa','-ra_'+(f.cons['JNa']).charAt(1));
  f.add('Tra','Ta','-ra_'+(f.cons['Ta']).charAt(1));
    f.add('shhTra','shhTa','-ra_'+(f.cons['shhTa']).charAt(1));
    f.add('TTra','TTa','-ra_'+(f.cons['TTa']).charAt(1));
    f.add('TThra','TTha','-ra_'+(f.cons['TTha']).charAt(1));
  f.add('Thra','Tha','-ra_'+(f.cons['Tha']).charAt(1));
  f.add('Dhra','Dha','-ra_'+(f.cons['Dha']).charAt(1));
  f.add('yra','ya','-ra_'+(f.cons['ya']).charAt(1));
  f.add('Lra','La','-ra_'+(f.cons['La']).charAt(1));
  f.add('qra','qa','-ra_'+(f.cons['qa']).charAt(1));
  f.add('Kra','Ka','-ra_'+(f.cons['Ka']).charAt(1));
  f.add('Gra','Ga','-ra_'+(f.cons['Ga']).charAt(1));
  f.add('.Dra','.Da','-ra_'+(f.cons['.Da']).charAt(1));
  f.add('.Dhra','.Dha','-ra_'+(f.cons['.Dha']).charAt(1));
  f.add('Dra','Da','-ra_'+(f.cons['Da']).charAt(1));
     f.add('DDra','DDa','-ra_'+(f.cons['DDa']).charAt(1));
  var maxindexafterra=f.maxindex;

  // some vowel accents (coz ka+i = ki, managing metrics, and shifted anusvaras)
  for (var ix=0; ix<=maxindexafterra; ix++) {//used to be afterimplicit
    g = f.list[ix];
    if (!g) continue;
    if (g.charAt(g.length-1)!='a') continue;
    if (!f.cons[g]) continue; // ? numbers, peds, punct etc. are out
    if (g.charAt(0)=='+') continue;
    if (g=='-a') continue; //tricky. few should be allowed..eg, college.naahh.
    f.add(g+'a',g,'-a'); // to get deNaryaa right

    var gg=g.substring(0,g.length-1);
    // extract high and low font metric
    var h= (f.cons[g]).charAt(0);
    var l= (f.cons[g]).charAt(1);
    // low_vowels (all dependents)
    if (gg!='r') f.add(gg+'u',g,'-u_'+l);
    if (gg!='r') f.add(gg+'U',g,'-U_'+l);
    if (gg!='h') f.add(gg+'R^i',g,'-R^i_'+l);
    f.add(gg+'R^I',g,'-R^I_'+l);
    f.add(gg+'L^i',g,'-L^i_'+l);
    f.add(gg+'L^I',g,'-L^I_'+l);
    f.add(gg+'.h',g,'-.h_'+l); // g+.h=gg.h

    // high_vowels (all dependents)
    f.add(gg+'.c',g,'-.c~'+h);
    // f.add(g+'.n',g,'-.n~'+h); // g+.n=g.n (no gg's so not neccessary)
    // f.add(g+'.N',g,'-.N~'+h); //
    // f.add(g+'.r',g,'-.r~'+h); //
    f.add(gg+'e',g,'-e~'+h);
    f.add(gg+'ai',g,'-ai~'+h);
    if((g=='hla')|(g=='chhya')|(g=='Dma')) {
       f.add(gg+'i_wide','-i',g); //i_wide for wideligatures
    }
    else {
       f.add(gg+'i','-i',g);
    }
    f.add(gg+'I',g,'-I');
    f.add(gg+'o',g,'-o');
    f.add(gg+'au',g,'-au');

  // now we enable shifted anusvaras
    f.add(gg+'e'+'.n',gg+'e','-.n~'+h+'s');
    f.add(gg+'ai'+'.n',gg+'ai','-.n~'+h+'s');
    f.add(gg+'I'+'.n',gg+'I','-.n~'+'rs');
    f.add(gg+'o'+'.n',gg+'o','-.n~'+'rs');
    f.add(gg+'au'+'.n',gg+'au','-.n~'+'rs');
  }
  var maxindexaftervowels=f.maxindex;

  /// finally some aliases .. better done as a replacement in dvng.js ...
  //f.alias('+O','+o');
  //f.alias('+A','+aa');
}


//A utility used widely in dvng.js and itrans.js etc..
// An internal utility function. 
// used widely in dvng.js and itrans.js etc..
// "Perl, perl" he cried out.. !
function replace (p,s,t) {// replace s with t in p
    var w;
    var l=s.length;
    if (p.indexOf(s) < 0) return p;
    var i=p.indexOf(s);
    if (t.indexOf(s) >= 0) return "recursion";
    while(i>=0) {
       w=p;
       i=p.indexOf(s);
       p=w.substring(0,i)+t+w.substring(i+l,w.length);
       i=p.indexOf(s);
    }
    return p;
}

function remove (p,s) {// remove s in p
    var w;
    var l=s.length;
    if (p.indexOf(s) < 0) return p;
    var i=p.indexOf(s);
    while(i>=0) {
       w=p;
       i=p.indexOf(s);
       p=w.substring(0,i)+w.substring(i+l,w.length);
       i=p.indexOf(s);
    }
    return p;
}

///////////////////////////// Transliteration for Devanagari //////////////////
// This function parses the text to be transliterated, and completes the
// transliteration by passing its stuff on to Devanagari(). Regular HTML tags
// need to be caught. Also for isb style \n -> <BR>\n and \n\n -> <P>\n
// < > and & to be escaped inside dn output

function Transliterate (intext,face,style,lang) {
  // Begin the Transliteration
  var begintag='<font face="'+face+'">';
  var endtag='</font>';
  var outtext=begintag; 
  var Char;
  var phrase=""; 
  var insidetag=0;
  mode="format";
  // preprocess by style
  if (style=="itrans") {intext=itrans(mode,intext);} 
  if (style=="isb") {intext=isb(mode,intext);} 
  if (style=="sibal") {intext=sibal(mode,intext);}
  for (var ix = 0; ix < intext.length; ix++) {
     Char = intext.charAt(ix);
     if (insidetag==1) {
        outtext += Char;
        if (Char==">") {insidetag=0;}
        continue;
     }
     // outside tag
     if (Char=="<") {
        if(phrase.length>0) {outtext +=Devanagari(phrase,face,style,lang);}
        phrase="";
        outtext += Char;
        insidetag=1;
        continue;
     }
     phrase+=Char;
  }
  if(phrase.length>0) {outtext += Devanagari(phrase,face,style,lang);}
  outtext+=endtag;
  return outtext;
}

// This incorporates the style files.
// Passes words to Dvng() to transliterate.

function Devanagari (phrase,face,style,lang) {
  var begintag='<font face="'+face+'">';
  var endtag='</font>'; 
  var Char;
  var word="";
  var outphrase="";
  var mode="text";
  // preprocess by style
  if (style=="itrans") {phrase=itrans(mode,phrase);} 
  if (style=="isb") {phrase=isb(mode,phrase);} 
  if (style=="sibal") {phrase=sibal(mode,phrase);} 
  // do some std. pre-processing
  phrase = replace(phrase,"OM","aum");
  phrase = replace(phrase,"AUM","aum");
  phrase = replace(phrase,"A","aa");
  phrase = replace(phrase,"uu","U");
  phrase = replace(phrase,"ii","I");
  phrase = replace(phrase,"ee","I"); // my own..
  phrase = replace(phrase,"oo","U"); // my own..

  phrase = replace(phrase,"x","ksh");
  phrase = replace(phrase,"ld","L");

  phrase = replace(phrase,".m",".n");
  phrase = replace(phrase,"M",".n");

  phrase = replace(phrase,"|","\.");
  phrase = replace(phrase,"||","\.\.");

  // kluudgy..
  phrase = replace(phrase,"aai","aa_i");
  phrase = replace(phrase,"aI","a_I");
  phrase = replace(phrase,"ae","a_e");
  phrase = replace(phrase,"ao","a_o");
  phrase = replace(phrase,"aau","aa_u");
  phrase = replace(phrase,"aU","a_U");

  phrase = replace(phrase,"oa","o_a");
  phrase = replace(phrase,"oe","o_e"); 
  phrase = replace(phrase,"oi","o_i");
  phrase = replace(phrase,"oI","o_I");
  phrase = replace(phrase,"ou","o_u"); // can map it to au ??
  phrase = replace(phrase,"oU","o_U");

// added in v1.04
  phrase = replace(phrase,"ea","e_a");
  phrase = replace(phrase,"ei","e_i");
  phrase = replace(phrase,"eI","e_I");
  phrase = replace(phrase,"eu","e_u");
  phrase = replace(phrase,"eU","e_U");

  phrase = replace(phrase,"ia","i_a");
  phrase = replace(phrase,"ie","i_e"); 
  phrase = replace(phrase,"io","i_o");
  phrase = replace(phrase,"iu","i_u"); 
  phrase = replace(phrase,"iU","i_U");

// added in v1.04
  phrase = replace(phrase,"Ia","I_a");
  phrase = replace(phrase,"Ie","I_e"); 
  phrase = replace(phrase,"Io","I_o");
  phrase = replace(phrase,"Iu","I_u"); 
  phrase = replace(phrase,"IU","I_U");

  phrase = replace(phrase,"ue","u_e");
  phrase = replace(phrase,"ui","u_i");
  phrase = replace(phrase,"uI","u_I");
  phrase = replace(phrase,"ua","u_a");
  phrase = replace(phrase,"uo","u_o");

  phrase = replace(phrase,"Ue","U_e");
  phrase = replace(phrase,"UI","U_I");
  phrase = replace(phrase,"Ui","U_i");
  phrase = replace(phrase,"Ua","U_a");
  phrase = replace(phrase,"Uo","U_o");

// added in v1.05
  phrase = replace(phrase,"tth","t_th");
  
  // kluudgy..
  for (var ix = 0; ix < phrase.length; ix++) {
     Char = phrase.charAt(ix);
     ///////////////special english chars begin
     if ((Char==',')||(Char=='-')||(Char=='!')||(Char=='?')||(Char=='-')||(Char=='(')||(Char==')')||(Char=='%')||(Char=='[')||(Char==']')||(Char==';')||(Char=='`')||(Char=='\'')||(Char==':')||(Char=='/')||(Char=='+')||(Char=='=')) {
        if(word.length>0) {outphrase +=Dvng(word,style,lang,1);}
        word="";
        outphrase += endtag+Char+begintag;
        continue;
     }
     ////////////////special english chars end
     if ((Char==" ")||(Char=="\n")||(Char=="\t")||(Char=="\f")||(Char=="\\")||(Char=="\r")||(Char=="\b")||(Char=='0')||(Char=='1')||(Char=='2')||(Char=='3')||(Char=='4')||(Char=='5')||(Char=='6')||(Char=='7')||(Char=='8')||(Char=='9')) {
        if(word.length>0) {outphrase +=Dvng(word,style,lang,1);}
        word="";
        outphrase += Char;
        continue;
     }
     if (Char=="_") { //breakchar
        if(word.length>0) {outphrase +=Dvng(word,style,lang,0);}
        word="";
        continue;
     }
     if (Char=="#") { //punctuation. else Dvng gets confused on naam###
        if(word.length>0) {outphrase +=Dvng(word,style,lang,1);}
        outphrase +=Dvng(Char,style,lang,1);
        word="";
        continue;
     }
     if ((Char=="|")&&(word.length>0)) { //else Dvng gets confused on foo||
        if (word.charAt(word.length-1)!="||") {
            outphrase +=Dvng(word,style,lang,1);
            word=Char;
        }
        else {
            word+=Char;
            outphrase +=Dvng(word,style,lang,1);
            word="";
        }
        continue;
     }
     word+=Char;
  }
  if(word.length>0) {outphrase += Dvng(word,style,lang,1);}
  return outphrase;
}

// This function does the actual transliteration. Accepts a word
// as input. Respects breaks, and does the style mapping too.
// See itrans() in itrans.js for an example. Todo: velthuis.js

function Dvng (inword,style,lang,end) {//end=0 implies the 'word' isnt over yet
  // we need to do work in xdvng, to manage constraints. 
  // else its a mess here(?)
  var breakChar="_"; 
  var word=inword; 
  
  var len=word.length;
  var outwordface=""; var oldinletter,oldletter;
  var inletter=""; var letter=""; var start=1; var constraint=null;
  while(len>0) {
  //    all breaks done in Devanagari
  //    if (word.charAt(0)==breakChar) {// inefficient...
  //       rest=word.substring(1,len);
  //       word=rest; len=word.length;
  //       constraint=null;
  //    }
    oldletter=letter;
    oldinletter=inletter;
    for (var lx=len;lx>0;lx--) {
       // if(word.indexOf(breakChar)>0) {lx=word.indexOf(breakChar);}
       inletter=word.substring(0,lx);
       rest=word.substring(lx,len);

       letter = '+'+inletter; // try starter
       if ((f.face[letter])&&(start==1)) {
          outface=f.face[letter];
          outwordface+=outface;
          constraint=f.cons[letter];start=0;
          word=rest;len=word.length; break;
       }

       letter = inletter; // try independent (if xdvng.js is compehesnsive
       if(f.face[letter]) { // most should be satisfied here.
          // if we have a ki, but actually its ski, then i must be altered.
          if ((oldletter.charAt(oldletter.length-1)=='-')&&(letter.charAt(letter.length-1)=='i')&&(letter.charAt(letter.length-2)!='a')) {//last to prevent 'ai'
              var oldoutface=outface;
              var ln1=oldoutface.length;
              var ln2=outwordface.length;
              outwordface=outwordface.substring(0,ln2-ln1); // remove oldoutface
              outwordface+=f.face['-i_wide'];
              outwordface+=oldoutface;
              letter=letter.substring(0,letter.length-1); //knock off i
              letter=letter+'a'; //add 'a'
              outface=f.face[letter];
              outwordface+=outface;
              constraint=f.cons[inletter];  start=0; //inletter not letter!
              word=rest;len=word.length; break;
          }

          if ((oldletter=='r_mar')&&(lang!="marathi")&&(f.cons[letter])){//.r.n?
              var oldoutface=outface;
              var ln1=oldoutface.length;
              var ln2=outwordface.length;
              outwordface=outwordface.substring(0,ln2-ln1); // remove oldoutface
              outface=f.face[letter];
              outwordface+=outface;
              constraint=f.cons[letter]; // note!
              outwordface+=f.face['-.r~'+constraint.charAt(0)];
              constraint=f.cons[letter];  start=0;
              word=rest;len=word.length; break;
          }
          outface=f.face[letter];
          outwordface+=outface;
          constraint=f.cons[letter];  start=0;
          word=rest;len=word.length; break;
       }

       // try marathi r_mar (replaced if hindi or skt later)
       letter = inletter+'_mar';
       if((letter=='r_mar')&&(lx<len)) {
          outface=f.face['r_mar'];
          outwordface+=outface;
          start=0; constraint=null;
          word=rest;len=word.length; break;
       }

       letter = '-'+inletter; // xdvng.js doesnt cover .n,.N (but dupl is heavy)
       if ((f.face[letter])&&(constraint)) {// try dep which isnt sub or sup
          //reverse if -i
          if (inletter.charAt(0)=='i') {
              var oldoutface=outface;
              var ln1=oldoutface.length;
              var ln2=outwordface.length;
              outwordface=outwordface.substring(0,ln2-ln1); // remove outface
              outface=f.face[letter];
              outwordface+=outface;
              outwordface+=oldoutface;
          }
          else {
              outface=f.face[letter];
              outwordface+=outface;
          }
          start=0; // constraint remains the same
          word=rest;len=word.length; break;
       }

       if(constraint) { // shouldnt need this, if xdvng.js did a good job
        letter = '-'+inletter+'~'+constraint.charAt(0); // try dep which is sup
        if (f.face[letter]) {
          outface=f.face[letter];
          outwordface+=outface;
          start=0; // constraint remains the same. actually x on sup?
          word=rest;len=word.length; break;
        }
        letter = '-'+inletter+'_'+constraint.charAt(1); // try dep which is sub
        if (f.face[letter]) {
          outface=f.face[letter];
          outwordface+=outface;
          start=0; // constraint remains the same
          word=rest;len=word.length; break;
        }
       }

       letter = inletter+'-'; // try ped-endent
       if((f.face[letter])&&((lx<len)||(end==0))) { // not the last letter
          outface=f.face[letter];
          outwordface+=outface;
          constraint=f.cons[letter];  start=0;
          word=rest;len=word.length; break;
       }

       letter = inletter+'a'; // try the form with the halanth
       if((f.face[letter])&&(f.cons[letter])) {
          if ((oldletter=='r_mar')&&(lang!="marathi")&&(f.cons[letter])){//.r.n?
              var oldoutface=outface;
              var ln1=oldoutface.length;
              var ln2=outwordface.length;
              outwordface=outwordface.substring(0,ln2-ln1); // remove oldoutface
              outface=f.face[letter];
              outwordface+=outface;
              constraint=f.cons[letter]; // note!
              outwordface+=f.face['-.r~'+constraint.charAt(0)];
              constraint=f.cons[letter];  start=0;
              //word=rest;len=word.length; break;
          }
          else {
              outface=f.face[letter];
              outwordface+=outface;
              start=0; constraint=f.cons[letter];
          }
          // now add the halanth (virama)
          if((lang=="sanskrit")||(lx<len)||(end==0)) {// not the last letter..
             letter='-.h_'+constraint.charAt(1);
             outface=f.face[letter];
             outwordface+=outface;  start=0;
          }
          word=rest;len=word.length; break;
        }
    }
    // shouldnt reach here
    if (lx==0) {
       outface=inletter.blink();
       outwordface+=outface; start=0; constraint=null;
       rest=word.substring(1,len);
       word=rest; len=word.length;
    }
  }
  return outwordface;
}

// An example style function. Essentially a map between
// phonemes and their english representation. LHS is to be mapped to
// a valid default phoneme on the right. The RHS are really my
// representations of phonemes. See the TypeFaces() utility for the mapping.

// Notes: Care must be taken to make sure that cycles dont occur!!
// If you map a to b, remember that b might well be a valid character....

// this utility only for trapping ## in itrans. really an ugly part of itrans!
function replace2 (p,s,t,u) {// replace 1st occurence of s with t & second with u ... ad nauseum. used in jtrans.js (ugh)
    var w;
    var l=s.length;
    if (p.indexOf(s) < 0) return p;
    var i=p.indexOf(s);
    if (t.indexOf(s) >= 0) return "recursion";
    if (u.indexOf(s) >= 0) return "recursion";
    var odd=0;
    while(i>=0) {
       w=p;
       i=p.indexOf(s);
       if (odd==0) {p=w.substring(0,i)+t+w.substring(i+l,w.length);odd=1;}
       else {p=w.substring(0,i)+u+w.substring(i+l,w.length);odd=0;}
       i=p.indexOf(s);
    }
    return p;
}

function itrans (mode,word) {
  if (mode=="format") {
     word = replace(word,"\\threedots","###");
     word = replace(word,"\\.","#");
     word = replace(word,"\\-","-");
     word = replace(word,"\{\}","_"); // breakchar
     word = remove(word,"\{"); // kludge
     word = remove(word,"\}"); // kludge
     return (word);
  }
  if (mode=="text") {
     return (word);
  }
  return (word); //unknown mode
}

function isb (mode,word) {
  if (mode=="format") {
     word=itrans(mode,word);
     word = replace(word,"\n\n","impossiblePtagthis");
     word = replace(word,"\n","impossibleBRtagthis"); // to prevent
     word = replace(word,"impossibleBRtagthis","<BR>\n"); // recursion ugh!
     word = replace(word,"impossiblePtagthis","<P>\n");
     return (word);
  }
  if (mode=="text") {
     word=itrans(mode,word);
     return (word);
  }
  return (word); //unknown mode
}

// This is the basic entry point into the transliterator. I've tried to
// keep it is as general as possible. So that one could design one for other
// languages when a iso-88569-like elemental typeface is available.
// The function that is called when the "Transliterate" button is pressed.
// It picks up options from the <transliterate> tag. It passes what needs to
// be transliterated to Transliterate (see dvng.js), else sends it out straight
// as output. Its fragile, and anything but robust...

function Jtrans() {//should do the initial parsing plus Transliterate..
  var txt=self.document.englishform.englishtext.value; //gets messed up..
  var txt = replace(txt,"  "," "); // squeeze space

  var transtag="<transliterate "; // note the trailing space.. ugh!
  var begintranstag=txt.indexOf(transtag);
  var t=txt.substring(begintranstag+transtag.length,txt.length);
  var text=txt.substring(0,begintranstag+transtag.length);
  var endtranstag=t.indexOf(">");
  var optionstr=t.substring(0,endtranstag);
  if (optionstr.charAt(optionstr.length-1)==" ") { // that space can kill ya!
     optionstr=optionstr.substring(0,optionstr.length-1);
  }
  // parse optionstring
  var optionarray=optionstr.split(" ");
  var opt,val,tmpopt,tmparray;
  optarray = new Array();
  for (var i=0; i < optionarray.length; i++) {
    tmpopt=optionarray[i];
    tmparray=tmpopt.split("=");
    opt=tmparray[0]; val=tmparray[1];
    if(val.charAt(0)=='"') val=val.substring(1,val.length); // chop first
    if(val.charAt(val.length-1)=='"') val=val.substring(0,val.length-1); // chop
    optarray[opt.toLowerCase()]=val.toLowerCase();
  }
  var tag,face,lang,style;
  (optarray['tag'] == null) ? tag="dn" : tag = optarray['tag'];
  (optarray['face'] == null) ? face="Xdvng" : face = optarray['face'];
  (optarray['lang'] == null) ? lang="hindi" : lang = optarray['lang'];
  (optarray['style'] == null) ? style="default" : style = optarray['style'];

  if ((style=="itrans")||(style=="isb")){//ugh!! itrans sucks!
     t = replace2(t,'##','</dn>','<dn>');
  }

  // now we break up t into smaller pieces based on the tag.
  var btag='<'+tag+'>'; var Btag=btag.toUpperCase();
  var etag='</'+tag+'>'; var Etag=etag.toUpperCase();
  t = replace(t,Btag,btag); t = replace(t,Etag,etag); 
  tt = new Array(); var t;
  tt=t.split(btag); var tmptt, eindex, ttt;
  text+=tt[0];
  for (var i=1; i < tt.length; i++) {
    tmptt = tt[i];
    eindex = tmptt.indexOf(etag);
    ttt = tmptt.substring(0,eindex);
    text+=Transliterate(ttt,face,style,lang);
    text+= tmptt.substring(eindex+etag.length,tmptt.length);
  }
//  parent.trFrame=
//   '<html>'+text+'</html>\n';
//   self.location="javascript:parent.trFrame";
   jtransWin=window.open("",'jtransWin',"toolbar=yes,location=no,directories=no,status=no,menubar=yes,scrollbars=yes,resizable=yes,width=300,height=150");
   jtransWin.document.write('<html>'+text+'</html>\n');
   jtransWin.document.close();
}
</script>
</head>
<body bgcolor="#ffffff"><center><form name="englishform">
<font face="Times" size=3>
<p align=right><b><font color="red">J</font><font color="green">trans</font></b>
<b><font color=#999999><input type="button" value="Transliterate" name="jtrans" onClick="Jtrans()"></font></b><br>
<textarea name="englishtext" cols="60" rows="40">
<head>

<transliterate tag="dn" face="Xdvng" lang="hindi">

<LINK HXBURNED REL="fontdef" SRC="peter.pfr">
</head>
<body bgcolor=#ffffff>

<font size=5>
Gayatri Mantar:<p>
<dn> 
aum bhuurbhuvaH svaH tatsaviturvareNyaM
bhargo devasya dhiimahi dhiyo yonaH prachodayaat.h|<p>
<a href="http://www-personal.umich.edu/~pehook/words.html">###yahaa.n aur shabd mile.nge||</a><p>
2<sup>3</sup> + 6</dn>.<dn>17 = 14</dn>.<dn>17<br>
</dn>
</font>

<hr>

</body>
</textarea></form></center>

<address><a href="mailto:pehook@umich.edu">pehook@umich.edu</a></address>

<a href="http://weed.arch.com.inter.net/~sibal/jtrans/aboutjtrans.html">Transcription:</a> Thanks to <a href="mailto:sibal@att.com">Sandeep Sibal.</a>

</body></html>
